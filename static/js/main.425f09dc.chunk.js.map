{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","api/users.js","index.js"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","PostsList","selectedUserId","setPostId","setPostOpen","useState","posts","setPosts","selectedPostId","setSelectedPostId","useEffect","userId","filter","post","handleCloseButton","className","map","id","title","key","type","onClick","handleOpenButton","NewCommentForm","React","memo","addNewComment","name","email","body","uuidv4","newComment","setNewComment","handleChangeInput","handleEvent","target","value","prevState","onSubmit","clickEvent","preventDefault","method","placeholder","onChange","PostDetails","postId","setPost","comments","setComments","isVisibleComment","setVisibleComment","getPostDetails","comment","getPostComments","handleRemoveComment","commentId","removeCommentFromServer","previousComments","useCallback","headers","JSON","stringify","addCommentToServer","length","App","users","setUsers","setSelectedUserId","isPostOpen","sort","previous","next","slice","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.425f09dc.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n","import { BASE_URL, request } from './api';\n\nexport function getPosts() {\n  return request(`${BASE_URL}/posts`);\n}\n\nexport function getUserPosts(userId) {\n  return getPosts()\n    .then(posts => posts.filter(post => (\n      post.userId === userId\n    )));\n}\n\nexport function getPostDetails(postId) {\n  return request(`${BASE_URL}/posts/${postId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts, getPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  selectedUserId,\n  setPostId,\n  setPostOpen,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  useEffect(() => {\n    if (!selectedUserId) {\n      getPosts().then(setPosts);\n    } else {\n      getUserPosts(selectedUserId).then(setPosts);\n    }\n  }, [selectedUserId]);\n\n  const handleOpenButton = (id) => {\n    setPostOpen(true);\n    setSelectedPostId(id);\n    setPostId(id);\n  };\n\n  const handleCloseButton = () => {\n    setPostOpen(false);\n    setSelectedPostId('');\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(({ id, userId, title }) => (\n          <li className=\"PostsList__item\" key={id}>\n            <div>\n              <b>\n                [User #\n                {userId}\n                ]:\n              </b>\n              {title || 'No title'}\n            </div>\n            {selectedPostId !== id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleOpenButton(id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button button--active\"\n                onClick={handleCloseButton}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  setPostOpen: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = React.memo(({ addNewComment }) => {\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n    id: uuidv4(),\n  });\n\n  const handleChangeInput = (handleEvent) => {\n    const { name, value } = handleEvent.target;\n\n    setNewComment(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (clickEvent) => {\n    clickEvent.preventDefault();\n\n    addNewComment(newComment);\n\n    setNewComment({\n      name: '',\n      email: '',\n      body: '',\n      id: '',\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          onChange={handleChangeInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n\nNewCommentForm.propTypes = {\n  addNewComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  getPostComments,\n  removeCommentFromServer,\n  addCommentToServer,\n} from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState([]);\n  const [comments, setComments] = useState(null);\n  const [isVisibleComment, setVisibleComment] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(postId).then(setPost);\n    getPostComments(postId).then(setComments);\n  }, [postId]);\n\n  const handleRemoveComment = (commentId) => {\n    removeCommentFromServer(commentId);\n\n    setComments(previousComments => (\n      previousComments.filter(({ id }) => id !== commentId)\n    ));\n  };\n\n  const addNewComment = useCallback((comment) => {\n    addCommentToServer(comment);\n\n    setComments(previousComments => [\n      ...previousComments,\n      comment,\n    ]);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body || 'No description'}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {isVisibleComment ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setVisibleComment(false)}\n          >\n            Hide\n            {' '}\n            {comments ? comments.length : ''}\n            {' '}\n            comments\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setVisibleComment(true)}\n          >\n            Show comments\n          </button>\n        )}\n\n        <ul className=\"PostDetails__list\">\n          {isVisibleComment && comments && comments.map(({ id, body }) => (\n            <li className=\"PostDetails__list-item\" key={id}>\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => handleRemoveComment(id)}\n              >\n                X\n              </button>\n              <p>{body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getPostComments(postId) {\n  return request(`${BASE_URL}/comments`)\n    .then(comments => comments.filter(comment => (\n      comment.postId === postId\n    )));\n}\n\nexport function addCommentToServer(comment) {\n  return request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n\nexport function removeCommentFromServer(commentId) {\n  return request(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nexport const App = () => {\n  const [users, setUsers] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [postId, setPostId] = useState('');\n  const [isPostOpen, setPostOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const handleChange = (clickEvent) => {\n    const { value } = clickEvent.target;\n\n    setSelectedUserId(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {users ? (\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              onChange={handleChange}\n            >\n              <option value=\"0\">All users</option>\n              {users.map(({ name, id }) => (\n                <option value={id} key={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </label>\n        ) : (\n          <span>Users are not loaded</span>\n        )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={Number(selectedUserId)}\n            setPostId={setPostId}\n            setPostOpen={setPostOpen}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isPostOpen && (\n            <PostDetails\n              postId={Number(postId)}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { BASE_URL, request } from './api';\n\nexport function getUsers() {\n  return request(`${BASE_URL}/users`)\n    .then(users => users.sort((previous, next) => (previous.id - next.id)))\n    .then(users => users.slice(0, 10));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}